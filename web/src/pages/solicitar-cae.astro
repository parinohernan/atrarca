---
// Lógica del servidor
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Solicitar CAE - AFIP</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }
      header {
        background-color: #00395d;
        color: white;
        padding: 1rem;
        text-align: center;
      }
      nav {
        background-color: #00395d;
        border-color: #c1ced6;
        border-width: 1px;
        padding: 0.5rem;
        text-align: center;
      }
      nav a {
        color: rgba(172, 166, 201, 0.952);
        text-decoration: none;
        margin: 0 1rem;
        padding: 0.3rem 0.5rem;
        border-radius: 4px;
      }
      nav a:hover {
        background-color: rgba(54, 147, 190, 0.66);
      }
      main {
        max-width: 900px;
        margin: 2rem auto;
        padding: 1rem;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .form-section {
        margin-bottom: 2rem;
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
      }
      .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
      }
      .form-group {
        margin-bottom: 1rem;
      }
      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
      }
      input, select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
      }
      button {
        background-color: #0056b3;
        color: white;
        padding: 0.7rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        margin-top: 1rem;
      }
      button:hover {
        background-color: #003d7a;
      }
      .result {
        margin-top: 2rem;
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
      }
      .error {
        color: #d32f2f;
        padding: 1rem;
        border: 1px solid #ffcdd2;
        border-radius: 4px;
        background-color: #ffebee;
        margin-top: 1rem;
      }
      .hidden {
        display: none;
      }
      .user-info {
        margin-bottom: 0.5rem;
        text-align: right;
        font-size: 0.9rem;
        color: white;
      }
      
      #logoutBtn {
        background-color: transparent;
        color: white;
        border: 1px solid white;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 0.5rem;
      }
      
      #logoutBtn:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Sistema de Consultas AFIP</h1>
      <div class="user-info" id="userInfo">
        <span id="userName"></span>
        <button id="logoutBtn" class="hidden">Cerrar Sesión</button>
      </div>
      <nav>
        <a href="/">Consulta de Comprobantes</a>
        <a href="/solicitar-cae">Solicitar CAE</a>
        <a href="/login">Login</a>
      </nav>
    </header>
    
    <main>
      <h2>Solicitud de CAE</h2>
      <p>Complete los siguientes datos para solicitar un CAE:</p>
      
      <form id="caeForm">
        <div class="form-section">
          <h3>Datos del Comprobante</h3>
          <div class="form-row">
            <div class="form-group">
              <label for="puntoVenta">Punto de Venta:</label>
              <select id="puntoVenta" required>
                <option value="">Seleccionar...</option>
                <option value="1">0001</option>
                <option value="2">0002</option>
                <option value="3">0003</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="tipoComprobante">Tipo de Comprobante:</label>
              <select id="tipoComprobante" required>
                <option value="">Seleccionar...</option>
                <option value="1">Factura A</option>
                <option value="6">Factura B</option>
                <option value="11">Factura C</option>
                <option value="3">Nota de Crédito A</option>
                <option value="8">Nota de Crédito B</option>
                <option value="13">Nota de Crédito C</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="concepto">Concepto:</label>
              <select id="concepto" required>
                <option value="1">Productos</option>
                <option value="2">Servicios</option>
                <option value="3">Productos y Servicios</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="numero">Número:</label>
              <input type="number" id="numero" readonly>
              <button type="button" id="obtenerUltimoBtn">Obtener Último</button>
            </div>
          </div>
        </div>
        
        <div class="form-section">
          <h3>Datos del Receptor</h3>
          <div class="form-row">
            <div class="form-group">
              <label for="docTipo">Tipo de Documento:</label>
              <select id="docTipo" required>
                <option value="80">CUIT</option>
                <option value="96">DNI</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="docNro">Número de Documento:</label>
              <input type="text" id="docNro" required>
            </div>
          </div>
        </div>
        
        <div class="form-section">
          <h3>Importes</h3>
          <div class="form-row">
            <div class="form-group">
              <label for="importeNeto">Importe Neto:</label>
              <input type="number" id="importeNeto" step="0.01" required>
            </div>
            
            <div class="form-group">
              <label for="importeIVA">Importe IVA:</label>
              <input type="number" id="importeIVA" step="0.01" required>
            </div>
            
            <div class="form-group">
              <label for="importeTotal">Importe Total:</label>
              <input type="number" id="importeTotal" step="0.01" required>
            </div>
            
            <div class="form-group">
              <label for="alicuotaIVA">Alícuota IVA:</label>
              <select id="alicuotaIVA" required>
                <option value="5">21%</option>
                <option value="4">10.5%</option>
                <option value="6">27%</option>
                <option value="3">0%</option>
                <option value="9">2.5%</option>
                <option value="8">5%</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="form-section">
          <h3>Fechas (para servicios)</h3>
          <div class="form-row">
            <div class="form-group">
              <label for="fechaServicioDesde">Fecha Servicio Desde:</label>
              <input type="date" id="fechaServicioDesde">
            </div>
            
            <div class="form-group">
              <label for="fechaServicioHasta">Fecha Servicio Hasta:</label>
              <input type="date" id="fechaServicioHasta">
            </div>
            
            <div class="form-group">
              <label for="fechaVencimientoPago">Fecha Vencimiento Pago:</label>
              <input type="date" id="fechaVencimientoPago">
            </div>
          </div>
        </div>
        
        <button type="submit" id="submitBtn">Solicitar CAE</button>
      </form>
      
      <div id="resultado" class="hidden">
        <h3>Resultado de la solicitud</h3>
        <div id="resultadoContenido"></div>
      </div>
      
      <div id="error" class="error hidden"></div>
    </main>
    
    <script>
      // URL de la API
      const API_URL = 'http://localhost:3301/api/afip';
      
      document.addEventListener('DOMContentLoaded', () => {
        // Obtener elementos del DOM con comprobación de tipos
        const caeForm = document.getElementById('caeForm');
        const puntoVentaSelect = document.getElementById('puntoVenta') as HTMLSelectElement;
        const tipoComprobanteSelect = document.getElementById('tipoComprobante') as HTMLSelectElement;
        const obtenerUltimoBtn = document.getElementById('obtenerUltimoBtn');
        const numeroInput = document.getElementById('numero') as HTMLInputElement;
        const importeNetoInput = document.getElementById('importeNeto') as HTMLInputElement;
        const importeIVAInput = document.getElementById('importeIVA') as HTMLInputElement;
        const importeTotalInput = document.getElementById('importeTotal') as HTMLInputElement;
        const alicuotaIVASelect = document.getElementById('alicuotaIVA') as HTMLSelectElement;
        const resultadoDiv = document.getElementById('resultado');
        const resultadoContenido = document.getElementById('resultadoContenido');
        const errorDiv = document.getElementById('error');
        const conceptoSelect = document.getElementById('concepto') as HTMLSelectElement;
        const userInfo = document.getElementById('userInfo');
        const userName = document.getElementById('userName');
        const logoutBtn = document.getElementById('logoutBtn');
        
        // Verificar si hay un usuario conectado
        const userStr = localStorage.getItem('user');
        if (userStr) {
          const user = JSON.parse(userStr);
          if (userName) {
            userName.textContent = `Usuario: ${user.name}`;
          }
          if (logoutBtn) {
            logoutBtn.classList.remove('hidden');
            
            // Agregar funcionalidad al botón de logout
            logoutBtn.addEventListener('click', () => {
              localStorage.removeItem('token');
              localStorage.removeItem('user');
              window.location.reload();
            });
          }
        } else {
          // Redirigir al login si no hay usuario
          window.location.href = '/login';
        }
        
        // Función para obtener el último comprobante
        const obtenerUltimoComprobante = async () => {
          try {
            if (!puntoVentaSelect || !tipoComprobanteSelect || !numeroInput || !errorDiv) {
              console.error('No se encontraron elementos necesarios');
              return;
            }
            
            const puntoVenta = puntoVentaSelect.value;
            const tipoComprobante = tipoComprobanteSelect.value;
            
            if (!puntoVenta || !tipoComprobante) {
              if (errorDiv) {
                errorDiv.textContent = 'Debe seleccionar punto de venta y tipo de comprobante';
                errorDiv.classList.remove('hidden');
              }
              return;
            }
            
            // Agregar token de autenticación si existe
            const token = localStorage.getItem('token');
            const headers: Record<string, string> = {};
            
            if (token) {
              headers['Authorization'] = `Bearer ${token}`;
            }
            
            const response = await fetch(
              `${API_URL}/ultimo-comprobante?puntoVenta=${puntoVenta}&tipoComprobante=${tipoComprobante}`, 
              { headers }
            );
            
            if (response.status === 401 || response.status === 403) {
              // Redirigir al login si es necesario
              localStorage.removeItem('token');
              localStorage.removeItem('user');
              window.location.href = '/login';
              return;
            }
            
            const data = await response.json();
            
            if (data.success) {
              // Incrementar en 1 el último comprobante
              const ultimoComprobante = parseInt(data.ultimoComprobante);
              const siguiente = ultimoComprobante + 1;
              numeroInput.value = siguiente.toString();
              
              if (errorDiv) {
                errorDiv.classList.add('hidden');
              }
            } else {
              if (errorDiv) {
                errorDiv.textContent = data.error || 'Ocurrió un error al consultar AFIP';
                errorDiv.classList.remove('hidden');
              }
            }
          } catch (error) {
            console.error('Error:', error);
            if (errorDiv) {
              errorDiv.textContent = 'Error al conectar con el servidor';
              errorDiv.classList.remove('hidden');
            }
          }
        };
        
        // Manejar click en botón obtener último comprobante
        if (obtenerUltimoBtn) {
          obtenerUltimoBtn.addEventListener('click', obtenerUltimoComprobante);
        }
        
        // Calcular importes IVA y total cuando cambia el neto o la alícuota
        if (importeNetoInput && alicuotaIVASelect && importeIVAInput && importeTotalInput) {
          const calcularImportes = () => {
            const neto = parseFloat(importeNetoInput.value) || 0;
            let alicuotaValue = 0;
            
            // Mapear el ID de alícuota a su valor porcentual
            switch (alicuotaIVASelect.value) {
              case '5': alicuotaValue = 21; break;  // 21%
              case '4': alicuotaValue = 10.5; break; // 10.5%
              case '6': alicuotaValue = 27; break;  // 27%
              case '3': alicuotaValue = 0; break;   // 0%
              case '9': alicuotaValue = 2.5; break; // 2.5%
              case '8': alicuotaValue = 5; break;   // 5%
              default: alicuotaValue = 21;          // Default 21%
            }
            
            const iva = neto * (alicuotaValue / 100);
            const total = neto + iva;
            
            importeIVAInput.value = iva.toFixed(2);
            importeTotalInput.value = total.toFixed(2);
          };
          
          importeNetoInput.addEventListener('input', calcularImportes);
          alicuotaIVASelect.addEventListener('change', calcularImportes);
        }
        
        // Manejar envío del formulario
        if (caeForm && resultadoDiv && resultadoContenido && errorDiv) {
          caeForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            try {
              // Recopilar todos los datos del formulario
              const formData = {
                puntoVenta: (document.getElementById('puntoVenta') as HTMLSelectElement)?.value,
                tipoComprobante: (document.getElementById('tipoComprobante') as HTMLSelectElement)?.value,
                concepto: (document.getElementById('concepto') as HTMLSelectElement)?.value,
                numero: (document.getElementById('numero') as HTMLInputElement)?.value,
                docTipo: (document.getElementById('docTipo') as HTMLSelectElement)?.value,
                docNro: (document.getElementById('docNro') as HTMLInputElement)?.value,
                importeNeto: (document.getElementById('importeNeto') as HTMLInputElement)?.value,
                importeIVA: (document.getElementById('importeIVA') as HTMLInputElement)?.value,
                importeTotal: (document.getElementById('importeTotal') as HTMLInputElement)?.value,
                fecha: new Date().toISOString().slice(0, 10).replace(/-/g, ''), // Formato AAAAMMDD
                alicuotaIVA: (document.getElementById('alicuotaIVA') as HTMLSelectElement)?.value,
                fechaServicioDesde: (document.getElementById('fechaServicioDesde') as HTMLInputElement)?.value?.replace(/-/g, ''),
                fechaServicioHasta: (document.getElementById('fechaServicioHasta') as HTMLInputElement)?.value?.replace(/-/g, ''),
                fechaVencimientoPago: (document.getElementById('fechaVencimientoPago') as HTMLInputElement)?.value?.replace(/-/g, '')
              };
              
              // Validar datos básicos
              if (!formData.puntoVenta || !formData.tipoComprobante || !formData.numero || !formData.docNro || !formData.importeTotal) {
                errorDiv.textContent = 'Debe completar todos los campos obligatorios';
                errorDiv.classList.remove('hidden');
                return;
              }
              
              // Preparar datos específicos para la solicitud de CAE
              const requestData = {
                ...formData,
                // Agregar IVA como array para la API
                iva: [{
                  Id: formData.alicuotaIVA,
                  BaseImp: parseFloat(formData.importeNeto),
                  Importe: parseFloat(formData.importeIVA)
                }]
              };
              
              // Agregar token de autenticación
              const token = localStorage.getItem('token');
              const headers: Record<string, string> = {
                'Content-Type': 'application/json'
              };
              
              if (token) {
                headers['Authorization'] = `Bearer ${token}`;
              }
              
              const response = await fetch(`${API_URL}/obtener-cae`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(requestData)
              });
              
              if (response.status === 401 || response.status === 403) {
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                window.location.href = '/login';
                return;
              }
              
              const data = await response.json();
              
              if (data.success) {
                // Mostrar resultado exitoso
                console.log(data);
                
                resultadoContenido.innerHTML = `
                  <div class="success-message">
                    <p><strong>CAE obtenido exitosamente:</strong> ${data.cae}</p>
                    <p><strong>Vencimiento CAE:</strong> ${data.fechaVencimientoCAE}</p>
                    <p><strong>Comprobante:</strong> ${formData.tipoComprobante}-${formData.puntoVenta.padStart(5, '0')}-${formData.numero.padStart(8, '0')}</p>
                  </div>
                `;
                
                resultadoDiv.classList.remove('hidden');
                errorDiv.classList.add('hidden');
              } else {
                // Mostrar error
                errorDiv.textContent = data.error || 'Ocurrió un error al solicitar el CAE';
                errorDiv.classList.remove('hidden');
                resultadoDiv.classList.add('hidden');
              }
            } catch (error) {
              console.error('Error:', error);
              errorDiv.textContent = 'Error al conectar con el servidor';
              errorDiv.classList.remove('hidden');
              resultadoDiv.classList.add('hidden');
            }
          });
        }
      });
    </script>
  </body>
</html> 