---
// Sin importación del Layout
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Sistema de facturación electrónica ARCA" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>Desde Astrial - Sistema ARCA</title>
    <style>
      /* Estilos base */
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }
      
      header {
        background-color: #2c3e50;
        color: white;
        padding: 1rem;
        text-align: center;
      }
      
      nav {
        background-color: #34495e;
        display: flex;
        padding: 0.5rem 1rem;
        color: white;
      }
      
      nav a {
        color: white;
        text-decoration: none;
        padding: 0.5rem 1rem;
        margin-right: 0.5rem;
      }
      
      nav a:hover {
        background-color: #4a6380;
        border-radius: 4px;
      }
      
      .user-name {
        margin-left: auto;
        padding: 0.5rem 0;
      }
      
      .logout-btn {
        background-color: #e74c3c;
        border: none;
        color: white;
        padding: 0.5rem 1rem;
        margin-left: 1rem;
        border-radius: 4px;
        cursor: pointer;
      }
      
      .hidden {
        display: none;
      }
      
      main {
        padding: 1.5rem;
        max-width: 1200px;
        margin: 0 auto;
      }
      
      .error-message, .success-message {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
      }
      
      .error-message {
        background-color: #f8d7da;
        color: #721c24;
      }
      
      .success-message {
        background-color: #d4edda;
        color: #155724;
      }
      
      /* Estilos específicos de esta página */
      .filter-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
        align-items: flex-end;
      }
      
      .form-group {
        display: flex;
        flex-direction: column;
      }
      
      .form-group label {
        margin-bottom: 0.5rem;
      }
      
      .form-group select, .form-group input {
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 4px;
      }
      
      .facturas-container {
        margin-top: 2rem;
      }
      
      .facturas-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
      }
      
      .facturas-table th, .facturas-table td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid #e2e8f0;
      }
      
      .facturas-table th {
        background-color: #f8fafc;
        font-weight: bold;
      }
      
      .action-btn {
        background-color: #38b2ac;
        border: none;
        color: white;
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
        border-radius: 4px;
        cursor: pointer;
      }
      
      .error-details-btn {
        background-color: #be4b49;
        border: none;
        color: white;
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
        border-radius: 4px;
        cursor: pointer;
      }
      
      /* Añadir estos estilos para los botones */
      .buscar-btn {
        padding: 0.5rem 1rem;
        background-color: #3b82f6;
        color: white;
        border-radius: 0.25rem;
        border: none;
        cursor: pointer;
      }
      
      .buscar-btn:hover {
        background-color: #2563eb;
      }
      
      .solicitar-todos-btn {
        padding: 0.5rem 1rem;
        background-color: #22c55e;
        color: white;
        border-radius: 0.25rem;
        border: none;
        cursor: pointer;
        margin-left: 0.5rem;
      }
      
      .solicitar-todos-btn:hover {
        background-color: #16a34a;
      }
      
      /* Clases para colores de fondo */
      .bg-red-50 {
        background-color: #fef2f2;
      }
      
      .bg-green-50 {
        background-color: #f0fdf4;
      }
      
      .bg-red-100 {
        background-color: #fee2e2;
      }
      
      .text-red-800 {
        color: #991b1b;
      }
      
      .rounded {
        border-radius: 0.25rem;
      }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css">
  </head>
  <body>
    <header>
      <h1>Sistema de Gestión ARCA</h1>
    </header>

    <nav>
      <a href="/">Inicio</a>
      <a href="/solicitar-cae">Solicitar CAE</a>
      <a href="/desde-astrial">Desde ASTRIAL</a>
      <span id="userName" class="user-name"></span>
      <button id="logoutBtn" class="logout-btn hidden">Cerrar sesión</button>
    </nav>

    <main>
      <!-- Contenido específico de esta página -->
      <div id="errorDiv" class="error-message hidden"></div>
      <div id="successDiv" class="success-message hidden"></div>
      
      <h2>Facturas sin CAE desde ASTRIAL</h2>
      
      <div class="filter-controls">
        <div class="form-group">
          <label for="puntoVenta">Punto de Venta</label>
          <select id="puntoVenta">
            <option value="">Todos</option>
            <option value="0001">0001</option>
            <option value="0002">0002</option>
            <option value="0003">0003</option>
            <option value="0004">0004</option>
            <option value="0005">0005</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="tipoComprobante">Tipo de Comprobante</label>
          <select id="tipoComprobante">
            <option value="">Todos</option>
            <option value="FCA">Factura A</option>
            <option value="FCB">Factura B</option>
            <option value="NCA">Nota de Crédito A</option>
            <option value="NCB">Nota de Crédito B</option>
          </select>
        </div>
        
        <div class="form-group" style="align-self: flex-end;">
          <button id="buscarBtn" class="buscar-btn">Buscar Facturas</button>
          <button id="solicitarTodosBtn" class="solicitar-todos-btn">Buscar todos los CAE</button>
        </div>
      </div>
      
      <div id="facturasContainer" class="facturas-container hidden">
        <h3>Facturas sin CAE</h3>
        <p id="facturaCount">Se encontraron 0 facturas sin CAE</p>
        
        <table id="facturasTable" class="facturas-table">
          <thead>
            <tr>
              <th>Tipo</th>
              <th>Punto de Venta</th>
              <th>Número</th>
              <th>Fecha</th>
              <th>Cliente</th>
              <th>Importe Neto</th>
              <th>IVA</th>
              <th>Total</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody id="facturasBody">
            <!-- Aquí se cargarán las facturas dinámicamente -->
          </tbody>
        </table>
      </div>
    </main>

    <!-- Script de autenticación -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Verificar si hay un usuario conectado
        const userStr = localStorage.getItem('user');
        const token = localStorage.getItem('token');
        
        // Obtener referencias a elementos DOM
        const userName = document.getElementById('userName');
        const logoutBtn = document.getElementById('logoutBtn');
        
        if (userStr && token) {
          const user = JSON.parse(userStr);
          if (userName) userName.textContent = `Usuario: ${user.name}`;
          if (logoutBtn) {
            logoutBtn.classList.remove('hidden');
            logoutBtn.addEventListener('click', () => {
              localStorage.removeItem('token');
              localStorage.removeItem('user');
              window.location.href = '/login';
            });
          }
        } else if (window.location.pathname !== '/login') {
          // Redirigir al login si no hay usuario y no estamos ya en la página login
          window.location.href = '/login';
        }
      });
    </script>
    
    <!-- Script específico de esta página -->
    <script>
      // @ts-nocheck
      // Esta directiva le dice a TypeScript que ignore los errores en este archivo
      
      // Asegúrate de que esta es la URL base correcta
      const API_URL = 'http://localhost:3301/api';
      
      document.addEventListener('DOMContentLoaded', () => {
        // Obtener referencias a elementos DOM
        const buscarBtn = document.getElementById('buscarBtn');
        const solicitarTodosBtn = document.getElementById('solicitarTodosBtn');
        const puntoVentaSelect = document.getElementById('puntoVenta');
        const tipoComprobanteSelect = document.getElementById('tipoComprobante');
        const facturasContainer = document.getElementById('facturasContainer');
        const facturasBody = document.getElementById('facturasBody');
        const facturaCount = document.getElementById('facturaCount');
        const errorDiv = document.getElementById('errorDiv');
        const successDiv = document.getElementById('successDiv');
        const token = localStorage.getItem('token');
        
        // Función para formatear número como moneda
        const formatCurrency = (value) => {
          // Verificar si el valor es válido
          if (value === undefined || value === null || isNaN(parseFloat(value))) {
            return '$0.00'; // Valor por defecto para valores no válidos
          }
          
          // Asegurarse de que el valor es un número
          const numValue = parseFloat(value);
          
          // Formatear con solo 2 decimales (importante para ARCA)
          return new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          }).format(numValue);
        };
        
        // Función para formatear fecha
        const formatDate = (dateStr) => {
          if (!dateStr) return '';
          const date = new Date(dateStr);
          return date.toLocaleDateString('es-AR');
        };
        
        // Función para solicitar CAE y actualizar la factura
        const solicitarCAE = async (tipo, puntoVenta, numero) => {
          try {
            if (errorDiv) errorDiv.classList.add('hidden');
            if (successDiv) successDiv.classList.add('hidden');
            
            // Obtener referencia a la celda de acción de la factura
            const filaFactura = document.getElementById(`factura-${tipo}-${puntoVenta}-${numero}`);
            const accionCell = filaFactura ? filaFactura.querySelector('td:last-child') : null;
            
            if (accionCell) {
              // Mostrar indicador de carga
              accionCell.innerHTML = `
                <div class="flex items-center">
                  <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Solicitando...
                </div>
              `;
            }
            
            const response = await fetch(`${API_URL}/astrial/grabar-cae`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify({
                tipo,
                puntoVenta,
                numero,
                solicitarCAE: true
              })
            });
            
            const data = await response.json();
            
            if (response.ok && data.success) {
              // Actualizar la celda para mostrar el CAE
              if (accionCell) {
                accionCell.innerHTML = `
                  <div class="px-2 py-1 bg-green-100 text-green-800 rounded">
                    CAE: ${data.cae}
                  </div>
                `;
                // Agregar un fondo verde claro a toda la fila
                filaFactura.classList.add('bg-green-50');
              }
              
              // Mostrar mensaje de éxito
              if (successDiv) {
                successDiv.textContent = `CAE obtenido correctamente: ${data.cae} (Vencimiento: ${data.fechaVencimiento})`;
                successDiv.classList.remove('hidden');
              }
              
              return { success: true, cae: data.cae, error: null };
            } else {
              // Actualizar celda para mostrar el error
              if (accionCell) {
                const errorMsg = data.error || 'Error al solicitar CAE';
                accionCell.innerHTML = `
                  <button class="px-2 py-1 bg-red-100 text-red-800 rounded error-details-btn" 
                          data-error="${errorMsg.replace(/"/g, '&quot;')}">
                    Error
                  </button>
                `;
                // Agregar un fondo rojo claro a toda la fila
                filaFactura.classList.add('bg-red-50');
                
                // Agregar evento al botón de error
                accionCell.querySelector('.error-details-btn')?.addEventListener('click', (e) => {
                  const btn = e.target as HTMLButtonElement;
                  alert(btn.dataset.error || 'Error desconocido');
                });
              }
              
              if (errorDiv) {
                errorDiv.textContent = data.error || 'Error al solicitar CAE';
                errorDiv.classList.remove('hidden');
              }
              
              return { success: false, cae: null, error: data.error || 'Error al solicitar CAE' };
            }
          } catch (error) {
            console.error('Error:', error);
            
            // Actualizar celda para mostrar el error
            const filaFactura = document.getElementById(`factura-${tipo}-${puntoVenta}-${numero}`);
            const accionCell = filaFactura ? filaFactura.querySelector('td:last-child') : null;
            
            if (accionCell) {
              accionCell.innerHTML = `
                <button class="px-2 py-1 bg-red-100 text-red-800 rounded error-details-btn" 
                        data-error="Error de conexión: No se pudo contactar al servidor">
                  Error
                </button>
              `;
              // Agregar un fondo rojo claro a toda la fila
              filaFactura.classList.add('bg-red-50');
              
              // Agregar evento al botón de error
              accionCell.querySelector('.error-details-btn')?.addEventListener('click', (e) => {
                const btn = e.target as HTMLButtonElement;
                alert(btn.dataset.error || 'Error desconocido');
              });
            }
            
            if (errorDiv) {
              errorDiv.textContent = 'Error al comunicarse con el servidor';
              errorDiv.classList.remove('hidden');
            }
            
            return { success: false, cae: null, error: 'Error al comunicarse con el servidor' };
          }
        };
        
        // Función para procesar todas las facturas secuencialmente
        const solicitarTodosCAE = async () => {
          // Verificar si hay facturas para procesar
          const filas = facturasBody?.querySelectorAll('tr');
          if (!filas || filas.length === 0) {
            if (errorDiv) {
              errorDiv.textContent = 'No hay facturas para procesar';
              errorDiv.classList.remove('hidden');
            }
            return;
          }
          
          // Mostrar mensaje de inicio
          if (successDiv) {
            successDiv.textContent = `Iniciando proceso para ${filas.length} facturas...`;
            successDiv.classList.remove('hidden');
          }
          
          let procesadas = 0;
          let exitosas = 0;
          let fallidas = 0;
          
          // Procesar cada factura secuencialmente
          for (const fila of filas) {
            // Verificar si esta fila ya tiene un CAE o error (si ya tiene un fondo verde o rojo)
            if (fila.classList.contains('bg-green-50') || fila.classList.contains('bg-red-50')) {
              procesadas++;
              continue; // Saltar esta factura
            }
            
            const botonSolicitar = fila.querySelector('.solicitar-cae-btn');
            if (!botonSolicitar) {
              procesadas++;
              continue; // No hay botón de solicitar, saltar
            }
            
            const tipo = botonSolicitar.dataset.tipo || '';
            const puntoVenta = botonSolicitar.dataset.puntoVenta || '';
            const numero = botonSolicitar.dataset.numero || '';
            
            // Actualizar mensaje de progreso
            if (successDiv) {
              successDiv.textContent = `Procesando ${procesadas + 1} de ${filas.length}: ${tipo} ${puntoVenta}-${numero}`;
            }
            
            // Solicitar CAE
            const resultado = await solicitarCAE(tipo, puntoVenta, numero);
            procesadas++;
            
            if (resultado.success) {
              exitosas++;
            } else {
              fallidas++;
            }
            
            // Pequeña pausa para evitar sobrecargar el servidor
            await new Promise(resolve => setTimeout(resolve, 500));
          }
          
          // Mostrar resumen final
          if (successDiv) {
            successDiv.textContent = `Proceso completado: ${exitosas} exitosas, ${fallidas} fallidas de ${procesadas} procesadas.`;
            successDiv.classList.remove('hidden');
          }
        };
        
        // Evento para buscar facturas
        if (buscarBtn) {
          buscarBtn.addEventListener('click', async () => {
            try {
              if (errorDiv) errorDiv.classList.add('hidden');
              if (successDiv) successDiv.classList.add('hidden');
              
              // Verificar que los elementos select existen
              if (!puntoVentaSelect || !tipoComprobanteSelect) {
                console.error('No se encontraron los selectores');
                return;
              }
              
              // Mostrar indicador de carga
              if (facturasBody) facturasBody.innerHTML = `
                <tr>
                  <td colspan="9" class="text-center py-4">
                    <div class="flex justify-center items-center">
                      <svg class="animate-spin mr-2 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Cargando facturas...
                    </div>
                  </td>
                </tr>
              `;
              
              // Mostrar el contenedor de facturas
              if (facturasContainer) facturasContainer.classList.remove('hidden');
              
              // TypeScript no reconoce automáticamente que estos son elementos select
              const puntoVenta = puntoVentaSelect.value;
              const tipo = tipoComprobanteSelect.value;
              
              let url = `${API_URL}/astrial/facturas-sin-cae`;
              if (puntoVenta) url += `?puntoVenta=${puntoVenta}`;
              if (tipo) url += `${puntoVenta ? '&' : '?'}tipo=${tipo}`;
              
              const response = await fetch(url, {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              const data = await response.json();
              if (response.ok && data.success && facturasBody) {
                // Actualizar el contador de facturas
                if (facturaCount) {
                  facturaCount.textContent = `Se encontraron ${data.facturas.length} facturas sin CAE`;
                }
                
                // Limpiar la tabla
                facturasBody.innerHTML = '';
                
                if (data.facturas.length === 0) {
                  facturasBody.innerHTML = `
                    <tr>
                      <td colspan="9" class="text-center py-4">
                        No se encontraron facturas sin CAE para los criterios seleccionados
                      </td>
                    </tr>
                  `;
                  return;
                }
                
                // Agregar las facturas a la tabla
                data.facturas.forEach(factura => {
                  const row = document.createElement('tr');
                  row.id = `factura-${factura.tipo}-${factura.puntoVenta}-${factura.numero}`;
                  
                  row.innerHTML = `
                    <td>${factura.tipo}</td>
                    <td>${factura.puntoVenta}</td>
                    <td>${factura.numero}</td>
                    <td>${formatDate(factura.fecha)}</td>
                    <td>${factura.cliente}</td>
                    <td>${formatCurrency(factura.importeNeto)}</td>
                    <td>${formatCurrency(factura.importeIva)}</td>
                    <td>${formatCurrency(factura.total)}</td>
                    <td>
                      <button 
                        class="solicitar-cae-btn action-btn"
                        data-tipo="${factura.tipo}"
                        data-punto-venta="${factura.puntoVenta}"
                        data-numero="${factura.numero}"
                      >
                        Solicitar CAE
                      </button>
                    </td>
                  `;
                  
                  facturasBody.appendChild(row);
                });
                
                // Agregar eventos a los botones de solicitar CAE
                document.querySelectorAll('.solicitar-cae-btn').forEach(btn => {
                  btn.addEventListener('click', async (e) => {
                    const button = e.target as HTMLButtonElement;
                    const tipo = button.dataset.tipo || '';
                    const puntoVenta = button.dataset.puntoVenta || '';
                    const numero = button.dataset.numero || '';
                    
                    await solicitarCAE(tipo, puntoVenta, numero);
                  });
                });
              } else {
                // Mostrar mensaje de error
                if (errorDiv) {
                  errorDiv.textContent = data.error || 'Error al obtener facturas';
                  errorDiv.classList.remove('hidden');
                }
                
                // Limpiar la tabla o mostrar mensaje de error
                if (facturasBody) {
                  facturasBody.innerHTML = `
                    <tr>
                      <td colspan="9" class="text-center py-4 text-red-600">
                        Error al cargar las facturas
                      </td>
                    </tr>
                  `;
                }
              }
            } catch (error) {
              console.error('Error:', error);
              
              // Mostrar mensaje de error
              if (errorDiv) {
                errorDiv.textContent = 'Error al comunicarse con el servidor';
                errorDiv.classList.remove('hidden');
              }
              
              // Limpiar la tabla o mostrar mensaje de error
              if (facturasBody) {
                facturasBody.innerHTML = `
                  <tr>
                    <td colspan="9" class="text-center py-4 text-red-600">
                      Error al comunicarse con el servidor
                    </td>
                  </tr>
                `;
              }
            }
          });
        }
        
        // Agregar el event listener para el botón de solicitar todos los CAE
        if (solicitarTodosBtn) {
          solicitarTodosBtn.addEventListener('click', solicitarTodosCAE);
        }
      });
    </script>
  </body>
</html>