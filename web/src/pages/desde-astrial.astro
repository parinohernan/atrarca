---
// Lógica del servidor
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Facturas ASTRIAL - AFIP</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }
      header {
        background-color: #00395d;
        color: white;
        padding: 1rem;
        text-align: center;
      }
      nav {
        background-color: #00395d;
        border-color: #c1ced6;
        border-width: 1px;
        padding: 0.5rem;
        text-align: center;
      }
      nav a {
        color: rgba(172, 166, 201, 0.952);
        text-decoration: none;
        margin: 0 1rem;
        padding: 0.3rem 0.5rem;
        border-radius: 4px;
      }
      nav a:hover {
        background-color: rgba(54, 147, 190, 0.66);
      }
      main {
        max-width: 1000px;
        margin: 2rem auto;
        padding: 1rem;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .form-group {
        margin-bottom: 1rem;
      }
      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
      }
      input, select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
      }
      button {
        background-color: #0056b3;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      button:hover {
        background-color: #003d7a;
      }
      .filter-controls {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
      }
      .filter-controls .form-group {
        flex: 1;
      }
      .hidden {
        display: none;
      }
      .facturas-container {
        margin-top: 2rem;
      }
      .facturas-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
      }
      .facturas-table th, .facturas-table td {
        padding: 0.5rem;
        text-align: left;
        border-bottom: 1px solid #ddd;
      }
      .facturas-table th {
        background-color: #f0f0f0;
      }
      .facturas-table tr:hover {
        background-color: #f5f5f5;
      }
      .action-btn {
        margin-right: 0.5rem;
      }
      .success-message {
        color: green;
        padding: 0.5rem;
        background-color: #e8f5e9;
        border-radius: 4px;
        margin-bottom: 1rem;
      }
      .error-message {
        color: #721c24;
        padding: 0.5rem;
        background-color: #f8d7da;
        border-radius: 4px;
        margin-bottom: 1rem;
      }
      .user-name {
        color: white;
        margin-right: 10px;
      }
      .logout-btn {
        background-color: #be4b49;
        border: none;
        color: white;
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
        border-radius: 4px;
        cursor: pointer;
      }
      .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 5px;
      }
      .status-pending {
        background-color: #ffc107;
      }
      .status-success {
        background-color: #28a745;
      }
    </style>
  </head>

  <body>
    <header>
      <h1>Sistema de Gestión AFIP</h1>
    </header>

    <nav>
      <a href="/">Inicio</a>
      <a href="/solicitar-cae">Solicitar CAE</a>
      <a href="/desde-astrial">Desde ASTRIAL</a>
      <span id="userName" class="user-name"></span>
      <button id="logoutBtn" class="logout-btn hidden">Cerrar sesión</button>
    </nav>

    <main>
      <h2>Facturas sin CAE desde ASTRIAL</h2>
      
      <div id="errorDiv" class="error-message hidden"></div>
      <div id="successDiv" class="success-message hidden"></div>
      
      <div class="filter-controls">
        <div class="form-group">
          <label for="puntoVenta">Punto de Venta</label>
          <select id="puntoVenta">
            <option value="">Todos</option>
            <option value="0001">0001</option>
            <option value="0002">0002</option>
            <option value="0003">0003</option>
            <option value="0004">0004</option>
            <option value="0005">0005</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="tipoComprobante">Tipo de Comprobante</label>
          <select id="tipoComprobante">
            <option value="">Todos</option>
            <option value="FCA">Factura A</option>
            <option value="FCB">Factura B</option>
            <option value="NCA">Nota de Crédito A</option>
            <option value="NCB">Nota de Crédito B</option>
          </select>
        </div>
        
        <div class="form-group" style="align-self: flex-end;">
          <button id="buscarBtn" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Buscar Facturas</button>
          <button id="solicitarTodosBtn" class="ml-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">Buscar todos los CAE</button>
        </div>
      </div>
      
      <div id="facturasContainer" class="facturas-container hidden">
        <h3>Facturas sin CAE</h3>
        <p id="facturaCount">Se encontraron 0 facturas sin CAE</p>
        
        <table id="facturasTable" class="facturas-table">
          <thead>
            <tr>
              <th>Tipo</th>
              <th>Punto de Venta</th>
              <th>Número</th>
              <th>Fecha</th>
              <th>Cliente</th>
              <th>Importe Neto</th>
              <th>IVA</th>
              <th>Total</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody id="facturasBody">
            <!-- Aquí se cargarán las facturas dinámicamente -->
          </tbody>
        </table>
      </div>
    </main>

    <script>
      // @ts-nocheck  
      // Esta directiva le dice a TypeScript que ignore los errores en este archivo
      
      // Asegúrate de que esta es la URL base correcta
      const API_URL = 'http://localhost:3301/api';
      
      document.addEventListener('DOMContentLoaded', () => {
        // Verificar si hay un usuario conectado
        const userStr = localStorage.getItem('user');
        const token = localStorage.getItem('token');
        
        if (!userStr || !token) {
          window.location.href = '/login';
          return;
        }
        
        // Obtener referencias a elementos DOM
        const user = JSON.parse(userStr);
        const userName = document.getElementById('userName');
        const logoutBtn = document.getElementById('logoutBtn');
        const buscarBtn = document.getElementById('buscarBtn');
        const solicitarTodosBtn = document.getElementById('solicitarTodosBtn');
        const puntoVentaSelect = document.getElementById('puntoVenta');
        const tipoComprobanteSelect = document.getElementById('tipoComprobante');
        const facturasContainer = document.getElementById('facturasContainer');
        const facturasBody = document.getElementById('facturasBody');
        const facturaCount = document.getElementById('facturaCount');
        const errorDiv = document.getElementById('errorDiv');
        const successDiv = document.getElementById('successDiv');
        
        // Verificar cada elemento antes de usarlo
        if (userName) userName.textContent = `Usuario: ${user.name}`;
        if (logoutBtn) {
          logoutBtn.classList.remove('hidden');
          logoutBtn.addEventListener('click', () => {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login';
          });
        }
        
        // Función para formatear número como moneda
        const formatCurrency = (value) => {
          return new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS'
          }).format(value);
        };
        
        // Función para formatear fecha
        const formatDate = (dateStr) => {
          if (!dateStr) return '';
          const date = new Date(dateStr);
          return date.toLocaleDateString('es-AR');
        };
        
        // Función para solicitar CAE y actualizar la factura
        const solicitarCAE = async (tipo, puntoVenta, numero) => {
          try {
            if (errorDiv) errorDiv.classList.add('hidden');
            if (successDiv) successDiv.classList.add('hidden');
            
            // Obtener referencia a la celda de acción de la factura
            const filaFactura = document.getElementById(`factura-${tipo}-${puntoVenta}-${numero}`);
            const accionCell = filaFactura ? filaFactura.querySelector('td:last-child') : null;
            
            if (accionCell) {
              // Mostrar indicador de carga
              accionCell.innerHTML = `
                <div class="flex items-center">
                  <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Solicitando...
                </div>
              `;
            }
            
            const response = await fetch(`${API_URL}/astrial/grabar-cae`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify({
                tipo,
                puntoVenta,
                numero,
                solicitarCAE: true
              })
            });
            
            const data = await response.json();
            
            if (response.ok && data.success) {
              // Actualizar la celda para mostrar el CAE
              if (accionCell) {
                accionCell.innerHTML = `
                  <div class="px-2 py-1 bg-green-100 text-green-800 rounded">
                    CAE: ${data.cae}
                  </div>
                `;
                // Agregar un fondo verde claro a toda la fila
                filaFactura.classList.add('bg-green-50');
              }
              
              // Mostrar mensaje de éxito
              if (successDiv) {
                successDiv.textContent = `CAE obtenido correctamente: ${data.cae} (Vencimiento: ${data.fechaVencimiento})`;
                successDiv.classList.remove('hidden');
              }
              
              return { success: true, cae: data.cae, error: null };
            } else {
              // Actualizar celda para mostrar el error
              if (accionCell) {
                const errorMsg = data.error || 'Error al solicitar CAE';
                accionCell.innerHTML = `
                  <button class="px-2 py-1 bg-red-100 text-red-800 rounded error-details-btn" 
                          data-error="${errorMsg.replace(/"/g, '&quot;')}">
                    Error
                  </button>
                `;
                // Agregar un fondo rojo claro a toda la fila
                filaFactura.classList.add('bg-red-50');
                
                // Agregar evento al botón de error
                accionCell.querySelector('.error-details-btn')?.addEventListener('click', (e) => {
                  const btn = e.target as HTMLButtonElement;
                  alert(btn.dataset.error || 'Error desconocido');
                });
              }
              
              if (errorDiv) {
                errorDiv.textContent = data.error || 'Error al solicitar CAE';
                errorDiv.classList.remove('hidden');
              }
              
              return { success: false, cae: null, error: data.error || 'Error al solicitar CAE' };
            }
          } catch (error) {
            console.error('Error:', error);
            
            // Actualizar celda para mostrar el error
            const filaFactura = document.getElementById(`factura-${tipo}-${puntoVenta}-${numero}`);
            const accionCell = filaFactura ? filaFactura.querySelector('td:last-child') : null;
            
            if (accionCell) {
              accionCell.innerHTML = `
                <button class="px-2 py-1 bg-red-100 text-red-800 rounded error-details-btn" 
                        data-error="Error de conexión: No se pudo contactar al servidor">
                  Error
                </button>
              `;
              // Agregar un fondo rojo claro a toda la fila
              filaFactura.classList.add('bg-red-50');
              
              // Agregar evento al botón de error
              accionCell.querySelector('.error-details-btn')?.addEventListener('click', (e) => {
                const btn = e.target as HTMLButtonElement;
                alert(btn.dataset.error || 'Error desconocido');
              });
            }
            
            if (errorDiv) {
              errorDiv.textContent = 'Error al comunicarse con el servidor';
              errorDiv.classList.remove('hidden');
            }
            
            return { success: false, cae: null, error: 'Error al comunicarse con el servidor' };
          }
        };
        
        // Función para procesar todas las facturas secuencialmente
        const solicitarTodosCAE = async () => {
          // Verificar si hay facturas para procesar
          const filas = facturasBody?.querySelectorAll('tr');
          if (!filas || filas.length === 0) {
            if (errorDiv) {
              errorDiv.textContent = 'No hay facturas para procesar';
              errorDiv.classList.remove('hidden');
            }
            return;
          }
          
          // Mostrar mensaje de inicio
          if (successDiv) {
            successDiv.textContent = `Iniciando proceso para ${filas.length} facturas...`;
            successDiv.classList.remove('hidden');
          }
          
          let procesadas = 0;
          let exitosas = 0;
          let fallidas = 0;
          
          // Procesar cada factura secuencialmente
          for (const fila of filas) {
            // Verificar si esta fila ya tiene un CAE o error (si ya tiene un fondo verde o rojo)
            if (fila.classList.contains('bg-green-50') || fila.classList.contains('bg-red-50')) {
              procesadas++;
              continue; // Saltar esta factura
            }
            
            const botonSolicitar = fila.querySelector('.solicitar-cae-btn') as HTMLButtonElement;
            if (!botonSolicitar) {
              procesadas++;
              continue; // No hay botón de solicitar, saltar
            }
            
            const tipo = botonSolicitar.dataset.tipo || '';
            const puntoVenta = botonSolicitar.dataset.puntoVenta || '';
            const numero = botonSolicitar.dataset.numero || '';
            
            // Actualizar mensaje de progreso
            if (successDiv) {
              successDiv.textContent = `Procesando ${procesadas + 1} de ${filas.length}: ${tipo} ${puntoVenta}-${numero}`;
            }
            
            // Solicitar CAE
            const resultado = await solicitarCAE(tipo, puntoVenta, numero);
            procesadas++;
            
            if (resultado.success) {
              exitosas++;
            } else {
              fallidas++;
            }
            
            // Pequeña pausa para evitar sobrecargar el servidor
            await new Promise(resolve => setTimeout(resolve, 500));
          }
          
          // Mostrar resumen final
          if (successDiv) {
            successDiv.textContent = `Proceso completado: ${exitosas} exitosas, ${fallidas} fallidas de ${procesadas} procesadas.`;
            successDiv.classList.remove('hidden');
          }
        };
        
        // Evento para buscar facturas
        if (buscarBtn) {
          buscarBtn.addEventListener('click', async () => {
            try {
              if (errorDiv) errorDiv.classList.add('hidden');
              if (successDiv) successDiv.classList.add('hidden');
              
              // Verificar que los elementos select existen
              if (!puntoVentaSelect || !tipoComprobanteSelect) {
                console.error('No se encontraron los selectores');
                return;
              }
              
              // TypeScript no reconoce automáticamente que estos son elementos select
              const puntoVenta = (puntoVentaSelect as HTMLSelectElement).value;
              const tipo = (tipoComprobanteSelect as HTMLSelectElement).value;
              
              let url = `${API_URL}/astrial/facturas-sin-cae`;
              if (puntoVenta) url += `?puntoVenta=${puntoVenta}`;
              if (tipo) url += `${puntoVenta ? '&' : '?'}tipo=${tipo}`;
              
              const response = await fetch(url, {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              const data = await response.json();
              
              if (response.ok && data.success && facturasBody) {
                // Limpiar tabla
                facturasBody.innerHTML = '';
                
                if (data.facturas && data.facturas.length > 0) {
                  // Ordenar por número de comprobante
                  data.facturas.sort((a, b) => {
                    if (a.tipo !== b.tipo) return a.tipo.localeCompare(b.tipo);
                    if (a.puntoVenta !== b.puntoVenta) return a.puntoVenta.localeCompare(b.puntoVenta);
                    return a.numero.localeCompare(b.numero);
                  });
                  
                  // Actualizar contador
                  if (facturaCount) {
                    facturaCount.textContent = `Se encontraron ${data.facturas.length} facturas sin CAE`;
                  }
                  
                  // Generar filas de la tabla
                  data.facturas.forEach(factura => {
                    const tr = document.createElement('tr');
                    tr.id = `factura-${factura.tipo}-${factura.puntoVenta}-${factura.numero}`;
                    
                    tr.innerHTML = `
                      <td>${factura.tipo}</td>
                      <td>${factura.puntoVenta}</td>
                      <td>${factura.numero}</td>
                      <td>${formatDate(factura.fecha)}</td>
                      <td>${factura.cliente || '-'}</td>
                      <td>${formatCurrency(factura.importeNeto)}</td>
                      <td>${formatCurrency(factura.importeIva)}</td>
                      <td>${formatCurrency(factura.total)}</td>
                      <td>
                        <button class="action-btn solicitar-cae-btn" data-tipo="${factura.tipo}" data-punto-venta="${factura.puntoVenta}" data-numero="${factura.numero}">
                          Solicitar CAE
                        </button>
                      </td>
                    `;
                    
                    facturasBody.appendChild(tr);
                  });
                  
                  // Agregar eventos a los botones
                  document.querySelectorAll('.solicitar-cae-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                      // Asegurar que el evento tenga un target y convertirlo al tipo correcto
                      if (e.target) {
                        const target = e.target as HTMLButtonElement;
                        // Extraer datos de los atributos data-*
                        const tipo = target.dataset.tipo || '';
                        const puntoVenta = target.dataset.puntoVenta || '';
                        const numero = target.dataset.numero || '';
                        
                        solicitarCAE(tipo, puntoVenta, numero);
                      }
                    });
                  });
                  
                  // Mostrar tabla
                  if (facturasContainer) facturasContainer.classList.remove('hidden');
                } else {
                  if (facturaCount) {
                    facturaCount.textContent = 'No se encontraron facturas sin CAE';
                  }
                  if (facturasContainer) facturasContainer.classList.remove('hidden');
                }
              } else {
                if (errorDiv) {
                  errorDiv.textContent = data.error || 'Error al buscar facturas';
                  errorDiv.classList.remove('hidden');
                }
                if (facturasContainer) facturasContainer.classList.add('hidden');
              }
            } catch (error) {
              console.error('Error:', error);
              if (errorDiv) {
                errorDiv.textContent = 'Error al comunicarse con el servidor';
                errorDiv.classList.remove('hidden');
              }
              if (facturasContainer) facturasContainer.classList.add('hidden');
            }
          });
        }
        
        // Agregar el event listener para el botón de solicitar todos los CAE
        if (solicitarTodosBtn) {
          solicitarTodosBtn.addEventListener('click', solicitarTodosCAE);
        }
      });
    </script>
  </body>
</html> 